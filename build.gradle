plugins {
    id 'java-library'
    id 'maven-publish'
    id 'signing'
}


java {
    withSourcesJar()
    withJavadocJar()
}

group = 'com.myseotoolbox.quota4j'
version = '1.0.6-SNAPSHOT'
project.archivesBaseName = rootProject.name
sourceCompatibility = '17'


repositories {
    mavenCentral()
}

dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter:5.9.0'
    testImplementation 'org.mockito:mockito-core:4.7.0'
    testImplementation "org.mockito:junit-jupiter:2.20.0"
    testImplementation "org.hamcrest:java-hamcrest:2.0.0.0"
}

artifacts {
    archives jar, javadocJar, sourcesJar
}


signing {

    def signingKey = findProperty("signingKey")
    if (signingKey != null) {
        //In CI we have the key stored in ORG_GRADLE_PROJECT_signingKey instead of accessing file specified in
        // gradle.properties
        logger.lifecycle('Using in memory pgp keys')
        def signingPassword = findProperty("signingKeyPassword")
        useInMemoryPgpKeys(signingKey, signingPassword)
    }
    sign publishing.publications
}

tasks.named('test') {
    useJUnitPlatform()
}


tasks.named('jar') {
    manifest {
        attributes('Implementation-Title': project.name,
                'Implementation-Version': project.version)
    }
}


publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                }
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }
            pom {
                name = 'Quota4j'
                description = 'A library to apply a quota to finite resources'
                url = 'https://github.com/quota4j/quota4j'

                developers {
                    developer {
                        id = 'snovelli'
                        name = 'Salvatore'
                    }
                }
                scm {
                    connection = 'scm:git:git:github.com:quota4j/quota4j.git'
                    developerConnection = 'scm:git:git:github.com:quota4j/quota4j.git'
                    url = 'https://github.com/quota4j/quota4j'
                }
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
            }
        }
    }

    repositories {
        maven {
            name = "OSSRH"
            url = "https://s01.oss.sonatype.org/content/repositories/snapshots/"

            /*repository(url: "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }

            snapshotRepository(url: "https://s01.oss.sonatype.org/content/repositories/snapshots/") {
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }*/

            credentials {
                username = findProperty("ossrhUsername")
                password = findProperty("ossrhPassword")
            }
        }
    }

}




